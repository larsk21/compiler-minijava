package edu.kit.compiler.data;

/**
 * Represents a type of Token created by the lexer.
 */
public enum TokenType {
    EndOfStream,
    Identifier,
    IntegerLiteral,
    Keyword_Abstract,
    Keyword_Assert,
    Keyword_Boolean,
    Keyword_Break,
    Keyword_Byte,
    Keyword_Case,
    Keyword_Catch,
    Keyword_Char,
    Keyword_Class,
    Keyword_Const,
    Keyword_Continue,
    Keyword_Default,
    Keyword_Double,
    Keyword_Do,
    Keyword_Else,
    Keyword_Enum,
    Keyword_Extends,
    Keyword_False,
    Keyword_Finally,
    Keyword_Final,
    Keyword_Float,
    Keyword_For,
    Keyword_Goto,
    Keyword_If,
    Keyword_Implements,
    Keyword_Import,
    Keyword_Instanceof,
    Keyword_Interface,
    Keyword_Int,
    Keyword_Long,
    Keyword_Native,
    Keyword_New,
    Keyword_Null,
    Keyword_Package,
    Keyword_Private,
    Keyword_Protected,
    Keyword_Public,
    Keyword_Return,
    Keyword_Short,
    Keyword_Static,
    Keyword_Strictfp,
    Keyword_String,
    Keyword_Super,
    Keyword_Switch,
    Keyword_Synchronized,
    Keyword_This,
    Keyword_Throws,
    Keyword_Throw,
    Keyword_Transient,
    Keyword_True,
    Keyword_Try,
    Keyword_Void,
    Keyword_Volatile,
    Keyword_While,
    Operator_NotEqual,
    Operator_Not,
    Operator_ParenL,
    Operator_ParenR,
    Operator_StarEqual,
    Operator_Star,
    Operator_PlusPlus,
    Operator_PlusEqual,
    Operator_Plus,
    Operator_Comma,
    Operator_MinusEqual,
    Operator_MinusMinus,
    Operator_Minus,
    Operator_Dot,
    Operator_SlashEqual,
    Operator_Slash,
    Operator_Colon,
    Operator_Semicolon,
    Operator_SmallerSmallerEqual,
    Operator_SmallerSmaller,
    Operator_SmallerEqual,
    Operator_Smaller,
    Operator_EqualEqual,
    Operator_Equal,
    Operator_GreaterEqual,
    Operator_GreaterGreaterEqual,
    Operator_GreaterGreaterGreaterEqual,
    Operator_GreaterGreaterGreater,
    Operator_GreaterGreater,
    Operator_Greater,
    Operator_Questionmark,
    Operator_PercentEqual,
    Operator_Percent,
    Operator_AndEqual,
    Operator_AndAnd,
    Operator_And,
    Operator_BracketL,
    Operator_BracketR,
    Operator_CircumEqual,
    Operator_Circum,
    Operator_BraceL,
    Operator_BraceR,
    Operator_Tilde,
    Operator_BarEqual,
    Operator_BarBar,
    Operator_Bar
}
