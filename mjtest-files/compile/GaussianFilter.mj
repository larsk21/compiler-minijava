/* This intends to test nested loops with a high amount of local variables */
class NaiveGaussian {
    public static void main(String[] args) {
        NaiveGaussian ng = new NaiveGaussian();
        int n = 50;
        int[][] data = ng.createMatrix(n, n);
        ng.populateMatrix(data, n, n);
        int[][] result = ng.createMatrix(n, n);

        int[] acc = new int[3];
        /* ignoring border pixels */
        int i = 1;
        while(i + 1 < n) {
            int j = 1;
            while(j + 1 < n) {
                int topLeft = data[i-1][j-1];
                int top = data[i-1][j];
                int topRight = data[i-1][j+1];
                int left = data[i][j-1];
                int mid = data[i][j];
                int right = data[i][j+1];
                int botLeft = data[i+1][j-1];
                int bot = data[i+1][j];
                int botRight = data[i+1][j+1];
                acc[0] = topLeft + 2 * top + topRight;
                acc[1] = left + 2 * mid + right;
                acc[2] = botLeft + 2 * bot + botRight;
                int total = acc[0] + 2 * acc[1] + acc[2];
                total = (total + 8) / 16;
                result[i][j] = total;
                j = j + 1;
            }
            i = i + 1;
        }

        ng.printMatrix(result, n, n);
    }

    public int[][] createMatrix(int rows, int cols) {
        int[][] result = new int[rows][];
        int i = 0;
        while (i < rows) {
            result[i] = new int[cols];
            i = i + 1;
        }
        return result;
    }

    public void populateMatrix(int[][] data, int rows, int cols) {
        RNG rng = new RNG();
        rng.init(13);
        int _24Bit = 256 * 256 * 256;
        int i = 0;
        while (i < rows) {
            int j = 0;
            while (j < cols) {
                int val = rng.getNext();
                val = val / _24Bit;
                if (val < 0) {
                    val = val + 256;
                }
                data[i][j] = val;
                j = j + 1;
            }
            i = i + 1;
        }
    }

    public void printMatrix(int[][] data, int rows, int cols) {
        int i = 0;
        while (i < rows) {
            int j = 0;
            while (j < cols) {
                int val = data[i][j];
                printNumber(val);
                j = j + 1;
            }
            int asciiNewLine = 10;
            System.out.write(asciiNewLine);
            System.out.flush();
            i = i + 1;
        }
    }

    public void printNumber(int val) {
        int asciiZero = 48;
        int asciiSpace = 32;
        int digit_1 = val / 100;
        int digit_2 = (val % 100) / 10;
        int digit_3 = val % 10;
        System.out.write(digit_1+asciiZero);
        System.out.write(digit_2+asciiZero);
        System.out.write(digit_3+asciiZero);
        System.out.write(asciiSpace);
    }
}

class RNG {
    public int currentVal;

    public void init(int seed) {
        currentVal = next(seed);
    }

    public int get() {
        return currentVal;
    }

    public int getNext() {
        currentVal = next(currentVal);
        return currentVal;
    }

    /* private */ public int next(int val) {
        int _primeFactor = 57203;
        int _16Bit = 256 * 256;

        val = val * _primeFactor;
        int upper = val * _16Bit;
        int lower = val / _16Bit;
        lower = lower * 31;
        return upper + lower + 7;
    }
}
